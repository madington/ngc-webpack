{"version":3,"file":"integration-cli.spec.js","sourceRoot":"","sources":["../../test/integration-cli.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as fs from 'fs';\nimport { expect } from 'chai';\n\n\nconst rimraf = require('rimraf');\nconst mapper = require('node-map-directory');\n\nimport { spawn, runWebpack, resolveWebpackConfig, getTsConfigMeta, configs, occurrences } from './testing/utils';\n\ndescribe('Integration', () => {\n  const tsMetaNgcW = getTsConfigMeta(configs.cli.ts);\n  const tsMetaPlugin = getTsConfigMeta(configs.plugin.ts);\n  const tsMetaNgc = getTsConfigMeta(configs.ngc.ts);\n\n  describe('ngc-w CLI', () => {\n    let bundleCode: string;\n    rimraf.sync(tsMetaNgcW.absGenDir);\n\n    let test = it('should compile using ngc-webapck', () => {\n      return spawn(`node dist/src/main.js -p ${configs.cli.ts} --webpack ${configs.cli.wp}`)\n        .then( () => {\n          expect(fs.existsSync(tsMetaNgcW.absGenDir));\n        })\n        .catch( err => expect(err).to.be.undefined );\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n    test = it('should bundle using webpack', () => {\n\n      const wpConfig = resolveWebpackConfig(require(configs.cli.wp));\n\n      return runWebpack(wpConfig).done\n        .then( () => {\n          expect(fs.existsSync('dist/test/ng-app-cli'));\n          bundleCode = fs.readFileSync(Path.resolve('dist/test/ng-app-cli/main.bundle.js'), 'utf8');\n        })\n        .catch( err => expect(err).to.be.undefined );\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n    describe('Feature tests', () => {\n      it('should load Component resources through webpack', () => {\n        const code = fs.readFileSync(Path.join(tsMetaNgcW.absGenDir, 'test/ng-app/app/home/home.component.scss.shim.ngstyle.ts'), 'utf8');\n        const RE = /export const styles:any\\[] = \\['(.+)']/;\n\n        expect(RE.exec(code)[1].indexOf(`$`)).to.equal(-1);\n      });\n\n      it('replace a resources path so the project content is from the new path', () => {\n        // We replaced a path so the new content should be in the bundle\n        // Since we run via CLI they should be in the ngfactory styles shim\n        // they will not be on the component since the 2nd pass (webpack) loads the original content\n        // In runtime we will get the result we want..\n        let count = occurrences(/\\.this-replaced-app-component/gm, bundleCode);\n        expect(count).to.equal(1);\n\n        // CLI run means no removal of component meta resources so the original should appear once\n        count = occurrences(/span\\.active/gm, bundleCode);\n        expect(count).to.equal(1);\n      });\n\n      it('replace a source content on the fly', () => {\n        let count = occurrences(/HTML WAS HIJACKED BY A TEST!!!/gm, bundleCode);\n        expect(count).to.equal(1);\n\n\n        count = occurrences(/Submit Local State to App State/gm, bundleCode);\n        expect(count).to.equal(1);\n      });\n\n    });\n\n  });\n\n  describe('Plugin', () => {\n    let bundleCode: string;\n\n    rimraf.sync(tsMetaPlugin.absGenDir);\n\n    let test = it('should compile using webpack plugin', () => {\n\n      const wpConfig = resolveWebpackConfig(require(configs.plugin.wp));\n\n      return runWebpack(wpConfig).done\n        .then( () => {\n          expect(fs.existsSync(tsMetaPlugin.absGenDir));\n          bundleCode = fs.readFileSync(Path.resolve('dist/test/ng-app-plugin/main.bundle.js'), 'utf8');\n        })\n        .catch( err => expect(err).to.be.undefined );\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n    describe('Feature tests', () => {\n      it('should load Component resources through webpack', () => {\n        const code = fs.readFileSync(Path.join(tsMetaPlugin.absGenDir, 'test/ng-app/app/home/home.component.scss.shim.ngstyle.ts'), 'utf8');\n        const RE = /export const styles:any\\[] = \\['(.+)']/;\n        expect(RE.exec(code)[1].indexOf(`$`)).to.equal(-1);\n      });\n\n      it('replace a resources path so the project content is from the new path', () => {\n        let count = occurrences(/\\.this-replaced-app-component/gm, bundleCode);\n        expect(count).to.equal(1);\n\n        // We replace the component metadata templates so this should be gone.\n        count = occurrences(/span\\.active/gm, bundleCode);\n        expect(count).to.equal(0);\n      });\n\n      it('replace a source content on the fly', () => {\n        let count = occurrences(/HTML WAS HIJACKED BY A TEST!!!/gm, bundleCode);\n        expect(count).to.equal(1);\n\n        // We replace the component metadata templates so this should be gone.\n        count = occurrences(/<div class=\"home-size\">/gm, bundleCode);\n        expect(count).to.equal(0);\n      });\n\n      it('should bundle resources once (factory ony)', () => {\n        const count = occurrences(/\\.home-size/gm, bundleCode);\n        expect(count).to.equal(1);\n      });\n\n      it('should replace component templates bundled from source with content from supplied resource', () => {\n        const match = /\\/\\* Content removed by ngc-webpack \\*\\//.exec(bundleCode);\n        expect(!!match).to.be.true;\n      });\n    });\n  });\n\n  describe('ngc CLI (control test)', () => {\n    rimraf.sync(tsMetaNgc.absGenDir);\n\n    let test = it('should compile using ngc', () => {\n\n      return spawn(`./node_modules/.bin/ngc -p ${configs.ngc.ts}`)\n        .then( () => {\n          expect(fs.existsSync(tsMetaNgc.absGenDir));\n        })\n        .catch( err => expect(err).to.be.undefined );\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n    test = it('should bundle using webpack', () => {\n\n      const wpConfig = resolveWebpackConfig(require(configs.ngc.wp));\n\n      return runWebpack(wpConfig).done\n        .then( () => {\n          expect(fs.existsSync('dist/test/ng-app-ngc'));\n        })\n        .catch( err => expect(err).to.be.undefined );\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n    it('should NOT load Component resources through webpack', () => {\n      const code = fs.readFileSync(Path.join(tsMetaNgc.absGenDir, 'test/ng-app/app/home/home.component.scss.shim.ngstyle.ts'), 'utf8');\n      const RE = /export const styles:any\\[] = \\['(.+)']/;\n\n      expect(RE.exec(code)[1].indexOf(`$`)).to.be.greaterThan(-1);\n    });\n\n    it('should bundle resources twice (factory + source)', () => {\n      const code = fs.readFileSync(Path.resolve('dist/test/ng-app-ngc/main.bundle.js'), 'utf8');\n      const count = occurrences(/\\.home-size/gm, code);\n      expect(count).to.equal(2);\n    });\n  });\n\n  describe(\"ALL\", () => {\n    let test = it('should create identical file structure in all compilations', () => {\n      const promises = [\n        mapper(tsMetaNgcW.absGenDir).then( m => JSON.stringify(m).replace(/main\\.browser\\.aot\\..*\\./, '')),\n        mapper(tsMetaPlugin.absGenDir).then( m => JSON.stringify(m).replace(/main\\.browser\\.aot\\..*\\./, '')),\n        mapper(tsMetaNgc.absGenDir).then( m => JSON.stringify(m).replace(/main\\.browser\\.aot\\..*\\./, '')),\n      ];\n\n      return Promise.all(promises)\n        .then( maps => expect(maps[0]).to.equal(maps[1]))\n        .then( maps => expect(maps[0]).to.equal(maps[2]));\n    });\n    (test as any).timeout(1000 * 60 * 3); // 3 minutes, should be enough to compile.\n\n  });\n\n});\n\n"]}