{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../test/testing/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as webpack from 'webpack';\nimport { spawn as spawnFactory } from 'child_process';\nimport * as fs from 'fs';\nimport * as Path from 'path';\n\nexport type Compiler = webpack.compiler.Compiler;\nexport type Stats = webpack.compiler.Stats;\n\nprocess.env.NODE_ENV = 'production';\n\nexport const configs = {\n  cli: {\n    ts: Path.resolve('tsconfig.cli.json'),\n    wp: Path.resolve('test/testing/buildConfig/webpack.cli.js')\n  },\n  ngc: {\n    ts: Path.resolve('tsconfig.ngc.json'),\n    wp: Path.resolve('test/testing/buildConfig/webpack.ngc.js')\n  },\n  plugin: {\n    ts: Path.resolve('tsconfig.plugin.json'),\n    wp: Path.resolve('test/testing/buildConfig/webpack.plugin.js')\n  }\n};\n\n/**\n * Returns a webpack configuration object.\n * You can supply args to be used if the config is a function (webpack config factory)\n *\n * Also support ES6 default exports.\n * @param config\n * @param args\n * @returns {any}\n */\nexport function resolveWebpackConfig(config: any, ...args: any[]): any {\n  if (typeof config === 'function') {\n    return config(...args);\n  } else if (config.__esModule === true && !!config.default) {\n    return resolveWebpackConfig(config.default, ...args);\n  } else {\n    return config;\n  }\n}\n\n/**\n * Run webpack based on a webpack config\n * @param config a webpack config object, can be a function, es6 default exported function, or object.\n */\nexport function runWebpack(config: any): { compiler: Compiler, done: Promise<Stats> } {\n  const compiler = webpack(resolveWebpackConfig(config));\n  return {\n    compiler,\n    done: new Promise( (RSV, RJT) => compiler.run((err, stats) => err ? RJT(err) : RSV(stats)) )\n  }\n}\n\n/**\n * Simple spawn wrapper that accepts a raw command line (with args) and return a promise with the result.\n * All IO goes to the console.\n * @param cmd\n * @returns {Promise<T>}\n */\nexport function spawn(cmd): Promise<any> {\n  return new Promise( (resolve, reject) => {\n    const args = cmd.split(' ');\n    const spawnInstance = spawnFactory(args.shift(), args, {stdio: \"inherit\"});\n\n    spawnInstance.on('exit', function (code) {\n      if (code === 0) {\n        resolve();\n      } else {\n        reject(code);\n      }\n    });\n  });\n}\n\nexport function getTsConfigMeta(tsConfigPath: string): {tsConfig: any, absGenDir: string} {\n  const tsConfig = JSON.parse(fs.readFileSync(tsConfigPath, 'utf8'));\n  return {\n    tsConfig,\n    absGenDir: Path.resolve(Path.dirname(tsConfigPath), tsConfig.angularCompilerOptions.genDir)\n  }\n}\n\nexport function occurrences(regex: RegExp, str: string): number {\n  if (!regex.global || !regex.multiline) {\n    throw new Error('Must use a multi & global regex');\n  }\n\n  let count = 0;\n  let match = regex.exec(str);\n\n  while (match) {\n    count++;\n    match = regex.exec(str);\n  }\n\n  return count;\n}"]}